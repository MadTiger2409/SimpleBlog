// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleBlog.Data.Database;

namespace SimpleBlog.Migrations
{
    [DbContext(typeof(BlogContext))]
    partial class BlogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SimpleBlog.Data.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("Login");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("Salt");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Account");
                });

            modelBuilder.Entity("SimpleBlog.Data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("PostId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SimpleBlog.Data.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Text");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SimpleBlog.Data.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdminId");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<string>("Tags");

                    b.Property<string>("Title");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("SimpleBlog.Data.Models.Admin", b =>
                {
                    b.HasBaseType("SimpleBlog.Data.Models.Account");


                    b.ToTable("Admin");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new { Id = 1, CreatedAt = new DateTime(2018, 12, 22, 20, 23, 36, 582, DateTimeKind.Utc), IsAdmin = true, Login = "SuperAdmin666", PasswordHash = new byte[] { 127, 146, 53, 149, 64, 71, 39, 171, 139, 201, 219, 196, 19, 71, 194, 111, 170, 172, 186, 110, 148, 199, 28, 107, 246, 37, 79, 26, 202, 107, 25, 125, 11, 29, 33, 64, 147, 139, 151, 198, 16, 107, 7, 49, 150, 190, 37, 233, 99, 52, 71, 54, 210, 89, 140, 162, 31, 7, 109, 147, 150, 27, 167, 99 }, Salt = new byte[] { 126, 75, 58, 102, 157, 49, 112, 239, 23, 45, 183, 190, 129, 167, 160, 60, 0, 113, 149, 38, 151, 142, 25, 75, 74, 218, 189, 135, 234, 194, 165, 237, 7, 203, 216, 131, 224, 183, 106, 92, 102, 210, 167, 173, 237, 69, 210, 247, 45, 222, 1, 28, 210, 125, 136, 90, 7, 214, 107, 50, 161, 14, 203, 99, 135, 142, 231, 69, 88, 73, 142, 225, 141, 120, 56, 3, 252, 194, 237, 11, 30, 18, 31, 98, 189, 68, 206, 226, 33, 22, 182, 246, 86, 254, 114, 191, 200, 66, 160, 143, 13, 114, 118, 206, 208, 66, 69, 58, 159, 216, 249, 94, 120, 127, 228, 25, 141, 24, 102, 195, 220, 246, 212, 221, 28, 124, 47, 253 }, UpdatedAt = new DateTime(2018, 12, 22, 20, 23, 36, 582, DateTimeKind.Utc) }
                    );
                });

            modelBuilder.Entity("SimpleBlog.Data.Models.User", b =>
                {
                    b.HasBaseType("SimpleBlog.Data.Models.Account");


                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("SimpleBlog.Data.Models.Comment", b =>
                {
                    b.HasOne("SimpleBlog.Data.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimpleBlog.Data.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimpleBlog.Data.Models.Post", b =>
                {
                    b.HasOne("SimpleBlog.Data.Models.Admin", "Admin")
                        .WithMany("Posts")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
