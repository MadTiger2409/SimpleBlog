@using Microsoft.AspNetCore.Http;
@model SimpleBlog.ViewModels.PostDetailsViewModel

@{
    ViewData["Title"] = "Post";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section Styles{
    <link rel="stylesheet" href="~/css/sites/post.css" />
}

@if (ViewBag.ShowMessage == true)
{
    <div class="alert alert-danger" role="alert">
        @ViewBag.Message
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

<div class="card" id="post-card">
    <div class="card-body">
        @if (Model.Post == null)
        {
            <h4 class="card-title">It's empty bro!</h4>
            <p class="card-text">What you see is an empty card because this post doesn't exist.</p>
            <a href="@Url.Action("Index", "Home")" class="card-link">Back</a>
        }
        else
        {
            <div class="d-flex w-100 justify-content-between">
                <h4 class="card-title">@Model.Post.Title</h4>
                <small class="text-muted">@Model.Post.CreatedAt.ToShortDateString()</small>
            </div>
            <hr />
            <p class="card-text">@Model.Post.Content</p>
            <hr />
            <div class="d-flex w-100 justify-content-between">
                <a href="@Url.Action("Index", "Home")" class="card-link">Back</a>
                <small class="text-muted">Tags: @Model.Post.Tags.Replace(';', ' ')</small>
            </div>
        }
    </div>
</div>

<div class="card" id="comments-card">
    <div class="card-body">
        <h4 class="card-title">Comments</h4>
        <hr />

        @if (Model.Post.Comments == null || !Model.Post.Comments.Any())
        {
            <p class="card-text">This post has no comments yet.</p>
        }
        else
        {
            <div class="list-group">
                @foreach (var comment in Model.Post.Comments.OrderByDescending(x => x.CreatedAt))
                {
                    <a href="#" class="list-group-item list-group-item-action flex-column align-items-start">
                        <div class="d-flex w-100 justify-content-between">
                            <h5 class="mb-1">@comment.User.Login</h5>
                            <small class="text-muted">@comment.CreatedAt.ToShortDateString()</small>
                        </div>
                        <p class="mb-1">@comment.Content</p>
                    </a>
                }
            </div>
        }
    </div>
</div>

<div class="card" id="comments-card">
    <div class="card-body">
        <h4 class="card-title">New Comment</h4>
        <hr />

        @if (Context.Session.GetString("Login") != null && Context.Session.GetString("IsAdmin") == "False")
        {
            <form action="../post/@Model.Post.Id.ToString()" method="post">
                <div class="form-group">
                    <label for="commentContent">Content</label>
                    @Html.TextAreaFor(model => model.NewComment.Content, new
               {
                   @type = "text",
                   @class = "form-control",
                   @id = "ommentContent",
                   @placeholder = "Enter your comment.",
                   @minlength = "3",
                   @rows = "6"
               })
                </div>
                <button type="submit" class="btn btn-primary">Comment</button>
            </form>
        }
        else
        {
            <p class="card-text">Only <strong>logged in users</strong> can add comments!</p>
        }
    </div>
</div>